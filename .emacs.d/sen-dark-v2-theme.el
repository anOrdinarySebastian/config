(deftheme sen-dark-v2
  "Created 2024-03-22.")

(custom-theme-set-variables
 'sen-dark-v2
 '(ansi-color-names-vector ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "#d0d0d0"])
 '(auto-save-default nil)
 '(company-clang-arguments '("--log=verbose"))
 '(company-clang-executable "/usr/bin/clangd")
 '(company-idle-delay nil)
 '(connection-local-criteria-alist '(((:machine "epa") epa-vars) ((:machine "bolt_vm") bolt_vm-vars) ((:application eshell :protocol "plinkx" :machine "bolt_vm") autogenerated-connection-local-profile/\(:application\ eshell\ :protocol\ \"plinkx\"\ :machine\ \"bolt_vm\"\)) ((:application eshell) eshell-connection-default-profile) ((:application tramp) tramp-connection-local-default-system-profile tramp-connection-local-default-shell-profile)))
 '(connection-local-profile-alist '((epa-vars (company-gtags--executable-connection . "/bin/global")) (bolt_vm-vars (company-gtags--executable-connection . "/bin/global")) (autogenerated-connection-local-profile/\(:application\ eshell\ :protocol\ \"plinkx\"\ :machine\ \"bolt_vm\"\) (eshell-path-env-list "/bin" "/usr/bin" "/sbin" "/usr/sbin" "/usr/local/bin" "/usr/local/sbin")) (eshell-connection-default-profile (eshell-path-env-list)) (tramp-connection-local-darwin-ps-profile (tramp-process-attributes-ps-args "-acxww" "-o" "pid,uid,user,gid,comm=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" "-o" "state=abcde" "-o" "ppid,pgid,sess,tty,tpgid,minflt,majflt,time,pri,nice,vsz,rss,etime,pcpu,pmem,args") (tramp-process-attributes-ps-format (pid . number) (euid . number) (user . string) (egid . number) (comm . 52) (state . 5) (ppid . number) (pgrp . number) (sess . number) (ttname . string) (tpgid . number) (minflt . number) (majflt . number) (time . tramp-ps-time) (pri . number) (nice . number) (vsize . number) (rss . number) (etime . tramp-ps-time) (pcpu . number) (pmem . number) (args))) (tramp-connection-local-busybox-ps-profile (tramp-process-attributes-ps-args "-o" "pid,user,group,comm=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" "-o" "stat=abcde" "-o" "ppid,pgid,tty,time,nice,etime,args") (tramp-process-attributes-ps-format (pid . number) (user . string) (group . string) (comm . 52) (state . 5) (ppid . number) (pgrp . number) (ttname . string) (time . tramp-ps-time) (nice . number) (etime . tramp-ps-time) (args))) (tramp-connection-local-bsd-ps-profile (tramp-process-attributes-ps-args "-acxww" "-o" "pid,euid,user,egid,egroup,comm=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" "-o" "state,ppid,pgid,sid,tty,tpgid,minflt,majflt,time,pri,nice,vsz,rss,etimes,pcpu,pmem,args") (tramp-process-attributes-ps-format (pid . number) (euid . number) (user . string) (egid . number) (group . string) (comm . 52) (state . string) (ppid . number) (pgrp . number) (sess . number) (ttname . string) (tpgid . number) (minflt . number) (majflt . number) (time . tramp-ps-time) (pri . number) (nice . number) (vsize . number) (rss . number) (etime . number) (pcpu . number) (pmem . number) (args))) (tramp-connection-local-default-shell-profile (shell-file-name . "/bin/sh") (shell-command-switch . "-c")) (tramp-connection-local-default-system-profile (path-separator . ":") (null-device . "/dev/null"))))
 '(copilot-idle-delay 60)
 '(custom-safe-themes '("114a8f7143a01e8ba083700f4dfaab333de3e2866c968b3849a1c5fef00e3c08" "05747b91f589bdb7ce9f93849a96f6cf8ee26fe479c5f1964d91c4a5a81d36c2" default))
 '(define-it-show-google-translate nil)
 '(dired-listing-switches "-alh")
 '(display-buffer-alist '(((derived-mode . prog-mode) display-buffer-reuse-window (nil)) ("\\*Help\\*" (display-buffer-same-window)) ("\\*Compilation.*" display-buffer-same-window) ("\\*Find.*" display-buffer-same-window) ("\\*Customize" display-buffer-same-window) ("\\*vc-.*" display-buffer-same-window)))
 '(display-buffer-base-action '(display-buffer-in-side-window (side . right)))
 '(doc-view-continuous t)
 '(doc-view-resolution 300)
 '(echo-keystrokes 0.5)
 '(eldoc-echo-area-prefer-doc-buffer nil)
 '(even-window-sizes 'width-only)
 '(flycheck-check-syntax-automatically '(save mode-enabled))
 '(flycheck-mode-line '(:eval (nil)))
 '(google-translate-default-target-language "sv")
 '(helm-M-x-always-save-history t)
 '(helm-buffer-max-length 30)
 '(helm-candidate-separator "--------------------------------------")
 '(helm-move-to-line-cycle-in-source nil)
 '(ibuffer-saved-filter-groups '(("no-helm" ("no-helm" (not name . "\\*helm")))))
 '(ibuffer-saved-filters '(("programming" (or (derived-mode . prog-mode) (mode . ess-mode) (mode . compilation-mode))) ("text document" (and (derived-mode . text-mode) (not (starred-name)))) ("TeX" (or (derived-mode . tex-mode) (mode . latex-mode) (mode . context-mode) (mode . ams-tex-mode) (mode . bibtex-mode))) ("web" (or (derived-mode . sgml-mode) (derived-mode . css-mode) (mode . javascript-mode) (mode . js2-mode) (mode . scss-mode) (derived-mode . haml-mode) (mode . sass-mode))) ("gnus" (or (mode . message-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode)))))
 '(inhibit-startup-screen t)
 '(ispell-program-name "~/AppData/Local/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")
 '(kill-buffer-delete-auto-save-files t)
 '(line-spacing 0.2)
 '(lsp-auto-guess-root t)
 '(lsp-clangd-binary-path "clangd")
 '(lsp-clangd-version "11.0.0")
 '(lsp-clients-clangd-args '("--header-insertion-decorators=0" "--log=verbose"))
 '(lsp-clients-clangd-executable "clangd")
 '(lsp-idle-delay 0.0)
 '(lsp-pylsp-plugins-pycodestyle-enabled t)
 '(org-agenda-loop-over-headlines-in-active-region nil)
 '(org-goto-interface 'outline-path-completion)
 '(org-hide-emphasis-markers t)
 '(org-outline-path-complete-in-steps nil)
 '(outline-minor-mode-prefix [3 0])
 '(package-selected-packages '(unicode-fonts yasnippet-snippets helm-projectile avy use-package pulsar helm-lsp lsp-mode projectile-ripgrep light-mode flycheck persp-projectile general company-jedi helm-tramp py-autopep8 olivetti projectile perspective magit god-mode pipenv helm auctex))
 '(projectile-dynamic-mode-line nil)
 '(projectile-enable-cmake-presets t)
 '(projectile-git-submodule-command "nil")
 '(projectile-globally-ignored-directories '("^\\.idea$" "^\\.vscode$" "^\\.ensime_cache$" "^\\.eunit$" "^\\.git$" "^\\.hg$" "^\\.fslckout$" "^_FOSSIL_$" "^\\.bzr$" "^_darcs$" "^\\.pijul$" "^\\.tox$" "^\\.svn$" "^\\.stack-work$" "^\\.ccls-cache$" "^\\.cache$" "^\\.clangd$" "*__pycache__"))
 '(projectile-project-search-path '("~/git/"))
 '(projectile-switch-project-action 'projectile-dired)
 '(projectile-track-known-projects-automatically nil)
 '(python-check-command "pyflakes.exe")
 '(python-skeleton-autoinsert t)
 '(safe-local-variable-values '((projectile-indexing-method . hybrid) (projectile-indexing-method quote hybrid) (org-goto-max-level . 2) (org-todo-keywords (sequence "TODO" "IN-PROGRESS" "DONE")) (org-todo-keywords quote ((sequence "TODO" "IN-PROGRESS" "|" "DONE")))))
 '(same-window-buffer-names '("*Help*" "*info*" "*compilation*" "*eww*" "*Occur*"))
 '(scroll-margin 5)
 '(smerge-command-prefix "")
 '(split-height-threshold nil)
 '(split-width-threshold 140)
 '(switch-to-prev-buffer-skip-regexp '("^\\*"))
 '(truncate-lines t)
 '(whitespace-global-modes '(prog-mode))
 '(whitespace-style '(face trailing spaces missing-newline-at-eof empty space-before-tab::tab space-before-tab space-mark tab-mark))
 '(window-divider-default-bottom-width 15)
 '(window-divider-default-right-width 15)
 '(window-min-width 70)
 '(fringe-mode 0)
 '(helm-buffer-skip-remote-checking t)
 '(helm-M-x-show-short-doc t)
 '(helm-completion-style 'helm)
 '(global-display-line-numbers-mode t)
 '(global-whitespace-mode t)
 '(helm-minibuffer-history-mode t)
 '(helm-mode t)
 '(show-paren-mode t)
 '(window-divider-mode t))

(custom-theme-set-faces
 'sen-dark-v2
 '(company-tooltip ((t (:background "black"))))
 '(compilation-info ((t (:foreground "LightPink4" :weight bold))))
 '(compilation-warning ((t (:foreground "Orange4" :weight bold))))
 '(completions-annotations ((t (:foreground "antique white" :slant italic))))
 '(completions-highlight ((t (:foreground "PaleTurquoise1"))))
 '(cursor ((t (:background "lavender"))))
 '(custom-button ((t (:background "seashell" :foreground "black" :box (:line-width (2 . 2) :style pressed-button)))))
 '(diff-header ((t (:inherit diff-file-header :extend t :weight normal))))
 '(diff-refine-added ((t (:background "dark green" :inherit diff-refine-changed))))
 '(diff-refine-removed ((t (:inherit diff-refine-changed :background "dark red"))))
 '(font-latex-sectioning-5-face ((t (:inherit variable-pitch :foreground "yellow4" :weight bold))))
 '(font-lock-comment-delimiter-face ((t (:foreground "dark sea green"))))
 '(font-lock-comment-face ((t (:slant oblique :foreground "peach puff"))))
 '(font-lock-constant-face ((t (:weight bold :foreground "SkyBlue1"))))
 '(font-lock-doc-face ((t (:slant oblique :foreground "spring green"))))
 '(font-lock-function-call-face ((t (:weight bold :inherit (font-lock-function-name-face)))))
 '(font-lock-function-name-face ((t (:weight bold :foreground "light blue"))))
 '(font-lock-keyword-face ((t (:foreground "cyan3"))))
 '(font-lock-string-face ((t (:foreground "lavender"))))
 '(font-lock-type-face ((t (:slant italic :foreground "light steel blue"))))
 '(fringe ((t (:foreground "Wheat" :background "black" :inherit (default)))))
 '(helm-match ((t (:extend t :foreground "light cyan"))))
 '(helm-selection ((t (:extend t :distant-foreground "black" :box (:line-width (2 . 2) :color "grey75" :style released-button) :weight bold))))
 '(hi-yellow ((t (:background "orange4" :foreground "black"))))
 '(mode-line-highlight ((t (:box (:line-width (2 . 2) :color "grey40" :style released-button)))))
 '(mode-line-inactive ((t (:height 1.0 :weight light :box (:line-width (2 . 5) :color "grey8" :style flat-button) :foreground "grey50" :background "grey8"))))
 '(org-headline-done ((t (:foreground "gray"))))
 '(org-level-1 ((t (:extend t :foreground "deep sky blue" :weight bold))))
 '(org-level-2 ((t (:inherit org-level-1 :extend nil :foreground "dodger blue"))))
 '(org-level-3 ((t (:inherit org-level-1 :extend nil :foreground "royal blue"))))
 '(org-level-4 ((t (:inherit org-level-1 :extend nil :foreground "slate blue"))))
 '(org-mode-line-clock ((t (:foreground "medium sea green" :underline t))))
 '(persp-selected-face ((t (:inherit font-lock-constant-face :weight normal))))
 '(region ((t (:background "purple4" :extend t))))
 '(whitespace-empty ((t (:extend t :background "grey80" :foreground "firebrick"))))
 '(whitespace-hspace ((t (:inherit default :foreground "grey20"))))
 '(whitespace-indentation ((t (:background "light yellow" :foreground "firebrick"))))
 '(whitespace-space ((t (:inherit whitespace-hspace))))
 '(window-divider ((t (:foreground "black"))))
 '(window-divider-first-pixel ((t (:inherit window-divider))))
 '(window-divider-last-pixel ((t (:inherit window-divider))))
 '(org-date ((t (:foreground "Dark Cyan" :underline t))))
 '(widget-field ((t (:inherit default :extend nil :foreground "white"))))
 '(helm-source-header ((t (:extend t :background "Purple4" :foreground "thistle2" :box (:line-width (10 . 2) :color "Purple4" :style flat-button)))))
 '(mode-line-active ((t (:inherit mode-line :box (:line-width (1 . 5) :color "grey15" :style flat-button)))))
 '(mode-line-buffer-id ((t (:height 0.9 :weight bold :foreground "red" :background "grey65"))))
 '(mode-line ((t (:height 1.0 :box (:line-width (1 . 1) :color nil :style nil) :foreground "cadet blue" :background "grey75"))))
 '(header-line ((t (:height 0.9 :box (:line-width (1 . -1) :color "grey20" :style released-button) :foreground "grey90" :background "grey20"))))
 '(helm-candidate-number ((t (:inherit nil :extend t :foreground "orchid"))))
 '(helm-M-x-short-doc ((t (:foreground "DimGray"))))
 '(avy-lead-face ((t (:background "DarkSeaGreen4" :foreground "black"))))
 '(avy-lead-face-0 ((t (:inherit avy-lead-face :background "DarkSeaGreen3"))))
 '(avy-lead-face-1 ((t (:inherit avy-lead-face :background "DarkSeaGreen2"))))
 '(avy-lead-face-2 ((t (:inherit avy-lead-face :background "DarkSeaGreen1"))))
 '(fixed-pitch ((t (:family "Monospace"))))
 '(variable-pitch ((((type w32)) (:foundry "outline" :family "Arial")) (t (:family "Sans Serif"))))
 '(escape-glyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
 '(homoglyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
 '(minibuffer-prompt ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "medium blue"))))
 '(highlight ((t (:foreground "Old Lace" :background "gray10"))))
 '(shadow ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow"))))
 '(secondary-selection ((((class color) (min-colors 88) (background light)) (:extend t :background "yellow1")) (((class color) (min-colors 88) (background dark)) (:extend t :background "SkyBlue4")) (((class color) (min-colors 16) (background light)) (:extend t :background "yellow")) (((class color) (min-colors 16) (background dark)) (:extend t :background "SkyBlue4")) (((class color) (min-colors 8)) (:extend t :foreground "black" :background "cyan")) (t (:inverse-video t))))
 '(trailing-whitespace ((((class color) (background light)) (:background "red1")) (((class color) (background dark)) (:background "red1")) (t (:inverse-video t))))
 '(font-lock-bracket-face ((t (:inherit (font-lock-punctuation-face)))))
 '(font-lock-builtin-face ((((class grayscale) (background light)) (:weight bold :foreground "LightGray")) (((class grayscale) (background dark)) (:weight bold :foreground "DimGray")) (((class color) (min-colors 88) (background light)) (:foreground "dark slate blue")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSteelBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Orchid")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSteelBlue")) (((class color) (min-colors 8)) (:weight bold :foreground "blue")) (t (:weight bold))))
 '(font-lock-delimiter-face ((t (:inherit (font-lock-punctuation-face)))))
 '(font-lock-doc-markup-face ((t (:inherit (font-lock-constant-face)))))
 '(font-lock-escape-face ((t (:inherit (font-lock-regexp-grouping-backslash)))))
 '(font-lock-negation-char-face ((t nil)))
 '(font-lock-number-face ((t nil)))
 '(font-lock-misc-punctuation-face ((t (:inherit (font-lock-punctuation-face)))))
 '(font-lock-operator-face ((t nil)))
 '(font-lock-preprocessor-face ((t (:slant italic :foreground "CornFlowerBlue"))))
 '(font-lock-property-name-face ((t (:inherit (font-lock-variable-name-face)))))
 '(font-lock-property-use-face ((t (:inherit (font-lock-property-name-face)))))
 '(font-lock-punctuation-face ((t nil)))
 '(font-lock-regexp-grouping-backslash ((t (:weight bold))))
 '(font-lock-regexp-grouping-construct ((t (:weight bold))))
 '(font-lock-variable-name-face ((t (:foreground "Aquamarine"))))
 '(font-lock-variable-use-face ((t (:inherit (font-lock-variable-name-face)))))
 '(font-lock-warning-face ((t (:weight bold :foreground "Pink"))))
 '(button ((t (:weight bold :underline (:color foreground-color :style line :position nil) :box (:line-width (2 . 2) :color "grey" :style released-button) :foreground "black" :background "grey"))))
 '(link ((((class color) (min-colors 88) (background light)) (:underline (:color foreground-color :style line :position nil) :foreground "RoyalBlue3")) (((class color) (background light)) (:underline (:color foreground-color :style line :position nil) :foreground "blue")) (((class color) (min-colors 88) (background dark)) (:underline (:color foreground-color :style line :position nil) :foreground "cyan1")) (((class color) (background dark)) (:underline (:color foreground-color :style line :position nil) :foreground "cyan")) (t (:inherit (underline)))))
 '(link-visited ((t (:underline (:color foreground-color :style line :position nil) :foreground "violet"))))
 '(tooltip ((t (:foreground "black" :background "lightyellow"))))
 '(mode-line-emphasis ((t (:weight bold))))
 '(isearch ((((class color) (min-colors 88) (background light)) (:foreground "lightskyblue1" :background "magenta3")) (((class color) (min-colors 88) (background dark)) (:foreground "brown4" :background "palevioletred2")) (((class color) (min-colors 16)) (:foreground "cyan1" :background "magenta4")) (((class color) (min-colors 8)) (:foreground "cyan1" :background "magenta4")) (t (:inverse-video t))))
 '(isearch-fail ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) (:foreground "grey")) (t (:inverse-video t))))
 '(lazy-highlight ((((class color) (min-colors 88) (background light)) (:distant-foreground "black" :background "paleturquoise")) (((class color) (min-colors 88) (background dark)) (:distant-foreground "white" :background "paleturquoise4")) (((class color) (min-colors 16)) (:distant-foreground "white" :background "turquoise3")) (((class color) (min-colors 8)) (:distant-foreground "white" :background "turquoise3")) (t (:underline (:color foreground-color :style line :position nil)))))
 '(match ((((class color) (min-colors 88) (background light)) (:background "khaki1")) (((class color) (min-colors 88) (background dark)) (:background "RoyalBlue3")) (((class color) (min-colors 8) (background light)) (:foreground "black" :background "yellow")) (((class color) (min-colors 8) (background dark)) (:foreground "white" :background "blue")) (((type tty) (class mono)) (:inverse-video t)) (t (:background "gray"))))
 '(next-error ((t (:background "blue3"))))
 '(query-replace ((t (:foreground "brown4" :background "palevioletred2"))))
 '(default ((t (:family "Consolas" :foundry "outline" :width normal :height 105 :weight regular :slant normal :underline nil :overline nil :extend nil :strike-through nil :box nil :inverse-video nil :foreground "LightSkyBlue4" :background "black" :stipple nil :inherit nil)))))

(provide-theme 'sen-dark-v2)
